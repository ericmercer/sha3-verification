import "keccak_openssl.cry"; 

keccak_module <- llvm_load_module "keccak.bc";  


// Helper function for allocating memory for symbolic variables
let alloc_init typ value = do {
    ptr <- crucible_alloc typ;
    crucible_points_to ptr (crucible_term value);
    return ptr;
};

let ptr_to_fresh name typ = do {
    x <- crucible_fresh_var name typ;
    xptr <- alloc_init typ x;
    return (x, xptr);
};


//PI function comparison
let pi_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));

    crucible_execute_func [arrp];

    let res = crucible_term {{ pi arr}};
    crucible_points_to arrp res;
};

//Tests against more optimized version using pre-calculated versions
pi_ov <- time (crucible_llvm_verify keccak_module "Pi" [] false pi_setup yices);
//Tests against basic version that loops and calculates on the fly
pi_loop_ov <- time (crucible_llvm_verify keccak_module "pi_loop" [] false pi_setup yices);

//Rho Function Comparison
let rho_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));

    crucible_execute_func [arrp];

    let res = crucible_term {{ rho arr}};
    crucible_points_to arrp res;
};

rho_ov <- time (crucible_llvm_verify keccak_module "Rho" [] false rho_setup yices);



//Theta Function Comparison
let theta_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));

    crucible_execute_func [arrp];

    let res = crucible_term {{ theta arr}};
    crucible_points_to arrp res;
};

theta_ov <- time (crucible_llvm_verify keccak_module "Theta" [] false theta_setup yices);


//Chi Function Comparison
let chi_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));

    crucible_execute_func [arrp];

    let res = crucible_term {{ chi arr}};
    crucible_points_to arrp res;
};

chi_ov <- time (crucible_llvm_verify keccak_module "Chi" [] false chi_setup yices);



//Iota Function Comparison
let iota_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));
    i <- crucible_fresh_var "i" (llvm_int 64);
    crucible_precond {{ i < 24 }};

    crucible_execute_func [arrp, crucible_term i];

    let res = crucible_term {{ iota arr i}};
    crucible_points_to arrp res;
};

iota_ov <- time (crucible_llvm_verify keccak_module "Iota" [] false iota_setup yices);


//Round Function Comparison
let round_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));
    i <- crucible_fresh_var "i" (llvm_int 64);
    crucible_precond {{ i < 24 }};

    crucible_execute_func [arrp, crucible_term i];

    let res = crucible_term {{ rnd arr i}};
    crucible_points_to arrp res;
};

//Runs round proof using overrides.  Completes in about 3 seconds.
round_ov <- time (crucible_llvm_verify keccak_module "Round_Functions" [pi_ov, rho_ov, theta_ov, chi_ov, iota_ov] false round_setup yices);

//Runs round proof without overrides.  Still completes but takes 50 seconds.
//round_without_ovs_ov <- time (crucible_llvm_verify keccak_module "Round_Functions" [] false round_setup yices);



//Keccak Function Comparison
let keccak_setup = do {
    (arr, arrp) <- ptr_to_fresh "array" (llvm_array 5 (llvm_array 5 (llvm_int 64)));

    crucible_execute_func [arrp];

    let res = crucible_term {{ keccakp_state arr}};
    crucible_points_to arrp res;
};

//Runs round proof using overrides.  Completes in about 3 seconds.
keccak_ov <- time (crucible_llvm_verify keccak_module "Keccak" [pi_ov, rho_ov, theta_ov, chi_ov, iota_ov, round_ov] false keccak_setup yices);